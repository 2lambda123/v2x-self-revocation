theory RevocationSolution2 begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



predicate: LessThan( x, y )<=>∃ z. (x+z) = y

predicate: GreaterThan( x, y )<=>∃ z. x = (y+z)

predicate: GreaterEqualThan( x, y )<=>(x = y) ∨ (∃ z. x = (y+z))

predicate: IsNotInList( x, y )<=>(((¬(x = y)) ∧ (¬(∃ a. (a+x) = y))) ∧ (¬(∃ b. (b+x) = y))) ∧
(¬(∃ c d. (c+d+x) = y))

predicate: IsInList( x, y )<=>(((x = y) ∨ (∃ a. (a+x) = y)) ∨ (∃ b. (b+x) = y)) ∨
(∃ c d. (c+d+x) = y)

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction OnlyOnce:
  "∀ x #i #j. ((OnlyOnce( x ) @ #i) ∧ (OnlyOnce( x ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction GreaterEqualThan:
  "∀ x y #i.
    (GreaterEqualThan( x, y ) @ #i) ⇒ ((x = y) ∨ (∃ z. x = (y+z)))"

restriction IsInList:
  "∀ x y #i.
    (IsInList( x, y ) @ #i) ⇒
    ((((x = y) ∨ (∃ a. (a+x) = y)) ∨ (∃ b. (b+x) = y)) ∨
     (∃ c d. (c+d+x) = y))"

restriction IsNotInList:
  "∀ x y #i.
    (IsNotInList( x, y ) @ #i) ⇒
    ((((¬(x = y)) ∧ (¬(∃ a. (a+x) = y))) ∧ (¬(∃ b. (b+x) = y))) ∧
     (¬(∃ c d. (c+d+x) = y)))"
  // safety formula

restriction IsValidPseudonym:
  "∀ ps #i.
    (IsValidPseudonym( ps ) @ #i) ⇒
    (¬(∃ e #k. (PseudonymRevoked( ps, e ) @ #k) ∧ (#k < #i)))"
  // safety formula

restriction IsLatestEpoch:
  "∀ x e #i.
    (IsLatestEpoch( x, e ) @ #i) ⇒
    (¬(∃ e2 #j. ((NewEpoch( x, e2 ) @ #j) ∧ (#j < #i)) ∧ (∃ z. e2 = (e+z))))"
  // safety formula

restriction IsLatestPRL:
  "∀ cnt #i.
    (IsLatestPRL( cnt ) @ #i) ⇒
    (¬(∃ prl cnt2 #j.
        ((PRLUpdated( prl, cnt2 ) @ #j) ∧ (#j < #i)) ∧ (∃ z. cnt2 = (cnt+z))))"
  // safety formula

rule (modulo E) init_parameters:
   [ ] --[ OnlyOnce( 'init_parameters' ) ]-> [ TolTmp( '1' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) increment_tol:
   [ TolTmp( tol ) ] --> [ TolTmp( ('1'+tol) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Init:
   [ Fr( ~ps_key ), Fr( ~ltk ), TolTmp( tol ) ]
  --[
  OnlyOnce( 'Init' ), SystemInitialized( tol ), NewEpoch( 'TC', '1' ),
  NewEpoch( 'RA', '1' ), PRLUpdated( '0', '1' )
  ]->
   [
   !Epoch( 'TC', '1' ), !Epoch( 'RA', '1' ), !Parameters( tol ),
   !Pseudonym( pk(~ps_key) ), !Ltk( pk(~ps_key), ~ps_key ),
   !Ltk( 'RA', ~ltk ), !Pk( 'RA', pk(~ltk) ), !PRL( '0', '1' ),
   Out( pk(~ltk) ), Out( pk(~ps_key) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) process_message:
   [
   In( <<m, e_v2v>, signature> ), !Parameters( tol ), !Pseudonym( ps ),
   !Epoch( 'RA', e )
   ]
  --[
  Eq( verify(signature, <m, e_v2v>, ps), true ),
  GreaterEqualThan( (e_v2v+tol), ('1'+e) ),
  GreaterEqualThan( (e+tol), ('1'+e_v2v) ),
  MessageAccepted( <m, e_v2v>, ps, e )
  ]->
   [ ]

  /*
  rule (modulo AC) process_message:
     [
     In( <<m, e_v2v>, signature> ), !Parameters( tol ), !Pseudonym( ps ),
     !Epoch( 'RA', e )
     ]
    --[
    Eq( z, true ), GreaterEqualThan( (e_v2v+tol), ('1'+e) ),
    GreaterEqualThan( (e+tol), ('1'+e_v2v) ),
    MessageAccepted( <m, e_v2v>, ps, e )
    ]->
     [ ]
    variants (modulo AC)
    1. e_v2v = e_v2v.13
       m     = m.14
       ps    = ps.15
       signature
             = signature.16
       z     = verify(signature.16, <m.14, e_v2v.13>, ps.15)
    
    2. e_v2v = e_v2v.20
       m     = m.21
       ps    = pk(x.37)
       signature
             = sign(<m.21, e_v2v.20>, x.37)
       z     = true
  */

rule (modulo E) TC_sign_message:
   [ !Epoch( 'TC', e ), !Pseudonym( ps ), !Ltk( ps, ps_key ), Fr( ~m ) ]
  --[
  IsValidPseudonym( ps ), IsLatestEpoch( 'TC', e ), Signed( <~m, e>, ps )
  ]->
   [ Out( <<~m, e>, sign(<~m, e>, ps_key)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) TC_process_heartbeat_no_revoke:
   [
   !Epoch( 'TC', e ), !Parameters( tol ), !Pseudonym( ps ),
   !Pk( 'RA', pkRA ), In( <<prl, e_hb>, signature> )
   ]
  --[
  IsLatestEpoch( 'TC', e ),
  Eq( verify(signature, <prl, e_hb>, pkRA), true ),
  GreaterEqualThan( e_hb, e ), GreaterEqualThan( (e+tol), e_hb ),
  IsNotInList( ps, prl ), HeartbeatProcessed( <prl, e_hb> ),
  NewEpoch( 'TC', e_hb )
  ]->
   [ !Epoch( 'TC', e_hb ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) TC_process_heartbeat_no_revoke:
     [
     !Epoch( 'TC', e ), !Parameters( tol ), !Pseudonym( ps ),
     !Pk( 'RA', pkRA ), In( <<prl, e_hb>, signature> )
     ]
    --[
    IsLatestEpoch( 'TC', e ), Eq( z, true ), GreaterEqualThan( e_hb, e ),
    GreaterEqualThan( (e+tol), e_hb ), IsNotInList( ps, prl ),
    HeartbeatProcessed( <prl, e_hb> ), NewEpoch( 'TC', e_hb )
    ]->
     [ !Epoch( 'TC', e_hb ) ]
    variants (modulo AC)
    1. e_hb  = e_hb.16
       pkRA  = pkRA.17
       prl   = prl.18
       signature
             = signature.20
       z     = verify(signature.20, <prl.18, e_hb.16>, pkRA.17)
    
    2. e_hb  = e_hb.22
       pkRA  = pk(x.41)
       prl   = prl.24
       signature
             = sign(<prl.24, e_hb.22>, x.41)
       z     = true
    // loop breaker: [0]
  */

rule (modulo E) TC_process_heartbeat_revoke:
   [
   !Epoch( 'TC', e ), !Parameters( tol ), !Pseudonym( ps ),
   !Pk( 'RA', pkRA ), In( <<prl, e_hb>, signature> )
   ]
  --[
  IsLatestEpoch( 'TC', e ),
  Eq( verify(signature, <prl, e_hb>, pkRA), true ),
  GreaterEqualThan( e_hb, e ), GreaterEqualThan( (e+tol), e_hb ),
  IsInList( ps, prl ), HeartbeatProcessed( <prl, e_hb> ),
  PseudonymRevoked( ps, e ), NewEpoch( 'TC', e_hb )
  ]->
   [ !Epoch( 'TC', e_hb ) ]

  // loop breaker: [0]
  /*
  rule (modulo AC) TC_process_heartbeat_revoke:
     [
     !Epoch( 'TC', e ), !Parameters( tol ), !Pseudonym( ps ),
     !Pk( 'RA', pkRA ), In( <<prl, e_hb>, signature> )
     ]
    --[
    IsLatestEpoch( 'TC', e ), Eq( z, true ), GreaterEqualThan( e_hb, e ),
    GreaterEqualThan( (e+tol), e_hb ), IsInList( ps, prl ),
    HeartbeatProcessed( <prl, e_hb> ), PseudonymRevoked( ps, e ),
    NewEpoch( 'TC', e_hb )
    ]->
     [ !Epoch( 'TC', e_hb ) ]
    variants (modulo AC)
    1. e_hb  = e_hb.16
       pkRA  = pkRA.17
       prl   = prl.18
       signature
             = signature.20
       z     = verify(signature.20, <prl.18, e_hb.16>, pkRA.17)
    
    2. e_hb  = e_hb.22
       pkRA  = pk(x.41)
       prl   = prl.24
       signature
             = sign(<prl.24, e_hb.22>, x.41)
       z     = true
    // loop breaker: [0]
  */

rule (modulo E) RA_generate_heartbeat:
   [ !Epoch( 'RA', e ), !PRL( prl, cnt ), !Ltk( 'RA', ltk ) ]
  --[
  IsLatestPRL( cnt ), IsLatestEpoch( 'RA', e ),
  OnlyOnce( <'generate_hb', prl, e> ), HeartbeatGenerated( <prl, e> )
  ]->
   [ Out( <<prl, e>, sign(<prl, e>, ltk)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RA_issue_revocation:
   [ !Epoch( 'RA', e ), !Pseudonym( ps ), !PRL( prl, cnt ) ]
  --[
  IsLatestPRL( cnt ), IsLatestEpoch( 'RA', e ),
  OnlyOnce( <'issue_revocation', ps> ), RevocationIssued( ps, e ),
  PRLUpdated( (prl+ps), ('1'+cnt) )
  ]->
   [ !PRL( (prl+ps), ('1'+cnt) ) ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) RA_advance_epoch:
   [ !Epoch( 'RA', e ) ]
  --[ OnlyOnce( <'advance_epoch', e> ), NewEpoch( 'RA', ('1'+e) ) ]->
   [ !Epoch( 'RA', ('1'+e) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

lemma sign_possible [heuristic=I]:
  exists-trace "∃ msg ps #i. Signed( msg, ps ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ msg ps #i. (Signed( msg, ps ) @ #i)"
*/
simplify
solve( !Epoch( 'TC', e ) ▶₀ #i )
  case Init_case_1
  solve( !Pseudonym( ps ) ▶₁ #i )
    case Init
    solve( !Ltk( pk(~ps_key), ps_key.1 ) ▶₂ #i )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma generate_hb_possible [heuristic=I]:
  exists-trace "∃ hb #i. HeartbeatGenerated( hb ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ hb #i. (HeartbeatGenerated( hb ) @ #i)"
*/
simplify
solve( !Epoch( 'RA', e ) ▶₀ #i )
  case Init_case_1
  solve( !PRL( prl, cnt ) ▶₁ #i )
    case Init
    solve( !Ltk( 'RA', ltk ) ▶₂ #i )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma issue_revocation_possible [heuristic=I]:
  exists-trace "∃ ps e #i. RevocationIssued( ps, e ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ ps e #i. (RevocationIssued( ps, e ) @ #i)"
*/
simplify
solve( !Epoch( 'RA', e ) ▶₀ #i )
  case Init_case_1
  solve( !Pseudonym( ps ) ▶₁ #i )
    case Init
    solve( !PRL( prl, cnt ) ▶₂ #i )
      case Init
      SOLVED // trace found
    qed
  qed
qed

lemma processing_hb_possible [heuristic=I]:
  exists-trace "∃ hb #i. HeartbeatProcessed( hb ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ hb #i. (HeartbeatProcessed( hb ) @ #i)"
*/
simplify
solve( HeartbeatProcessed( hb ) @ #i )
  case TC_process_heartbeat_no_revoke
  solve( !Parameters( tol ) ▶₁ #i )
    case Init_case_1
    solve( !Pseudonym( ps ) ▶₂ #i )
      case Init
      solve( !Pk( 'RA', pk(x) ) ▶₃ #i )
        case Init
        solve( (e_hb = e)  ∥ (∃ z. (e_hb = (e+z))) )
          case case_1
          solve( !Epoch( 'TC', e ) ▶₀ #i )
            case Init
            solve( !KU( sign(<prl, '1'>, ~ltk) ) @ #vk.4 )
              case RA_generate_heartbeat_case_1
              SOLVED // trace found
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma revocation_possible [heuristic=I]:
  exists-trace "∃ ps e #i. PseudonymRevoked( ps, e ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ ps e #i. (PseudonymRevoked( ps, e ) @ #i)"
*/
simplify
solve( !Parameters( tol ) ▶₁ #i )
  case Init_case_1
  solve( !Pseudonym( ps ) ▶₂ #i )
    case Init
    solve( !Pk( 'RA', pk(x) ) ▶₃ #i )
      case Init
      solve( (e_hb = e)  ∥ (∃ z. (e_hb = (e+z))) )
        case case_1
        solve( (pk(~ps_key) = prl)  ∥ (∃ a. ((a+pk(~ps_key)) = prl))  ∥
               (∃ b. ((b+pk(~ps_key)) = prl))  ∥ (∃ c d. ((c+d+pk(~ps_key)) = prl)) )
          case case_2
          solve( !Epoch( 'TC', e ) ▶₀ #i )
            case Init
            solve( !KU( sign(<(a+pk(~ps_key)), '1'>, ~ltk) ) @ #vk.4 )
              case RA_generate_heartbeat_case_2
              solve( !PRL( a, cnt ) ▶₂ #vr.4 )
                case Init
                solve( !KU( pk(~ps_key) ) @ #vk.6 )
                  case Init
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma process_message_possible [heuristic=I]:
  exists-trace "∃ msg ps e #i. MessageAccepted( msg, ps, e ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ msg ps e #i. (MessageAccepted( msg, ps, e ) @ #i)"
*/
simplify
solve( !Parameters( tol ) ▶₁ #i )
  case Init_case_1
  solve( !Pseudonym( pk(x) ) ▶₂ #i )
    case Init
    solve( !Epoch( 'RA', e ) ▶₃ #i )
      case Init
      solve( (('1'+e_v2v) = ('1'+'1'))  ∥ (∃ z. (('1'+e_v2v) = ('1'+'1'+z))) )
        case case_1
        solve( !KU( sign(<m, '1'>, ~ps_key) ) @ #vk.4 )
          case TC_sign_message_case_1
          solve( !KU( ~m ) @ #vk.3 )
            case TC_sign_message
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma exists_par_tol_5 [heuristic=I]:
  exists-trace
  "∃ tol #i.
    (SystemInitialized( tol ) @ #i) ∧ (tol = ('1'+'1'+'1'+'1'+'1'))"
/*
guarded formula characterizing all satisfying traces:
"∃ tol #i.
  (SystemInitialized( tol ) @ #i) ∧ (tol = ('1'+'1'+'1'+'1'+'1'))"
*/
simplify
solve( SystemInitialized( ('1'+'1'+'1'+'1'+'1') ) @ #i )
  case Init
  solve( TolTmp( ('1'+'1'+'1'+'1'+'1') ) ▶₂ #i )
    case increment_tol
    solve( TolTmp( ('1'+'1'+'1'+'1') ) ▶₀ #vr )
      case increment_tol
      solve( TolTmp( ('1'+'1'+'1') ) ▶₀ #vr.1 )
        case increment_tol
        solve( TolTmp( ('1'+'1') ) ▶₀ #vr.2 )
          case increment_tol
          solve( TolTmp( '1' ) ▶₀ #vr.3 )
            case init_parameters
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma exists_par_tol_8 [heuristic=I]:
  exists-trace
  "∃ tol #i.
    (SystemInitialized( tol ) @ #i) ∧
    (tol = ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'))"
/*
guarded formula characterizing all satisfying traces:
"∃ tol #i.
  (SystemInitialized( tol ) @ #i) ∧
  (tol = ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1'))"
*/
simplify
solve( SystemInitialized( ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1') ) @ #i )
  case Init
  solve( TolTmp( ('1'+'1'+'1'+'1'+'1'+'1'+'1'+'1') ) ▶₂ #i )
    case increment_tol
    solve( TolTmp( ('1'+'1'+'1'+'1'+'1'+'1'+'1') ) ▶₀ #vr )
      case increment_tol
      solve( TolTmp( ('1'+'1'+'1'+'1'+'1'+'1') ) ▶₀ #vr.1 )
        case increment_tol
        solve( TolTmp( ('1'+'1'+'1'+'1'+'1') ) ▶₀ #vr.2 )
          case increment_tol
          solve( TolTmp( ('1'+'1'+'1'+'1') ) ▶₀ #vr.3 )
            case increment_tol
            solve( TolTmp( ('1'+'1'+'1') ) ▶₀ #vr.4 )
              case increment_tol
              solve( TolTmp( ('1'+'1') ) ▶₀ #vr.5 )
                case increment_tol
                solve( TolTmp( '1' ) ▶₀ #vr.6 )
                  case init_parameters
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_signing_after_revoking_pseudonym [heuristic=I]:
  all-traces
  "∀ msg ps #i.
    (Signed( msg, ps ) @ #i) ⇒
    (¬(∃ e2 #j. (PseudonymRevoked( ps, e2 ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ msg ps #i.
  (Signed( msg, ps ) @ #i)
 ∧
  ∃ e2 #j. (PseudonymRevoked( ps, e2 ) @ #j) ∧ #j < #i"
*/
simplify
by contradiction /* from formulas */

lemma all_signatures_max_epoch_e_rev [heuristic=o "oracle.py"]:
  all-traces
  "∀ m ps e #i.
    (Signed( <m, e>, ps ) @ #i) ⇒
    (¬(∃ e_rev #j.
        (RevocationIssued( ps, e_rev ) @ #j) ∧ (∃ z. e = (e_rev+z))))"
/*
guarded formula characterizing all counter-examples:
"∃ m ps e #i.
  (Signed( <m, e>, ps ) @ #i)
 ∧
  ∃ e_rev #j. (RevocationIssued( ps, e_rev ) @ #j) ∧ ∃ z. (e = (e_rev+z))"
*/
simplify
solve( !Pseudonym( ps ) ▶₁ #i )
  case Init_case_1
  solve( !Pseudonym( pk(~ps_key) ) ▶₁ #j )
    case Init
    solve( !Ltk( pk(~ps_key), ps_key.1 ) ▶₂ #i )
      case Init
      solve( !PRL( prl, cnt ) ▶₂ #j )
        case Init
        solve( !Epoch( 'TC', (e_rev+z) ) ▶₀ #i )
          case TC_process_heartbeat_no_revoke
          solve( !KU( sign(<prl, (e_rev+z)>, ~ltk) ) @ #vk.4 )
            case RA_generate_heartbeat_case_01
            solve( (¬(#vr.5 < #j))  ∥ (∀ z.1. (('1'+z) = ('1'+z.1)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_02
            solve( (¬(#vr.5 < #j))  ∥ (∀ z. (('1'+e_rev) = (e_rev+z)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_03
            solve( (¬(#vr.5 < #j))  ∥ (∀ z. (('1'+e_rev+x) = (e_rev+z)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_04
            solve( (¬(#vr.5 < #j))  ∥ (∀ z.1. (('1'+x+z) = ('1'+x+z.1)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_05
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_06
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_07
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_08
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_09
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_10
            by contradiction /* from formulas */
          next
            case c_sign
            by solve( !KU( ~ltk ) @ #vk.7 )
          qed
        next
          case TC_process_heartbeat_revoke
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Init_case_2
  solve( !Pseudonym( pk(~ps_key) ) ▶₁ #j )
    case Init
    solve( !Ltk( pk(~ps_key), ps_key.1 ) ▶₂ #i )
      case Init
      solve( !PRL( prl, cnt ) ▶₂ #j )
        case Init
        solve( !Epoch( 'TC', (e_rev+z) ) ▶₀ #i )
          case TC_process_heartbeat_no_revoke
          solve( !KU( sign(<prl, (e_rev+z)>, ~ltk) ) @ #vk.4 )
            case RA_generate_heartbeat_case_01
            solve( (¬(#vr.5 < #j))  ∥ (∀ z.1. (('1'+z) = ('1'+z.1)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_02
            solve( (¬(#vr.5 < #j))  ∥ (∀ z. (('1'+e_rev) = (e_rev+z)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_03
            solve( (¬(#vr.5 < #j))  ∥ (∀ z. (('1'+e_rev+x) = (e_rev+z)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_04
            solve( (¬(#vr.5 < #j))  ∥ (∀ z.1. (('1'+x+z) = ('1'+x+z.1)) ⇒ ⊥) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case RA_generate_heartbeat_case_05
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_06
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_07
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_08
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_09
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_10
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_11
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_12
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_13
            by contradiction /* from formulas */
          next
            case c_sign
            by solve( !KU( ~ltk ) @ #vk.7 )
          qed
        next
          case TC_process_heartbeat_revoke
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma effective_revocation [heuristic=o "oracle.py"]:
  all-traces
  "∀ msg ps e #i.
    (MessageAccepted( msg, ps, e ) @ #i) ⇒
    (∃ tol #j.
      ((SystemInitialized( tol ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ e_rev #k.
          (RevocationIssued( ps, e_rev ) @ #k) ∧
          ((e = (e_rev+tol)) ∨ (∃ z. e = (e_rev+tol+z))))))"
/*
guarded formula characterizing all counter-examples:
"∃ msg ps e #i.
  (MessageAccepted( msg, ps, e ) @ #i)
 ∧
  ∀ tol #j.
   (SystemInitialized( tol ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    (∃ e_rev #k.
      (RevocationIssued( ps, e_rev ) @ #k)
     ∧
      ((e = (e_rev+tol)) ∨ (∃ z. (e = (e_rev+tol+z))))))"
*/
simplify
solve( !Pseudonym( pk(x) ) ▶₂ #i )
  case Init_case_1
  solve( !Pseudonym( pk(~ps_key) ) ▶₁ #k )
    case Init
    solve( !PRL( prl, cnt ) ▶₂ #k )
      case Init
      solve( !Parameters( tol ) ▶₁ #i )
        case Init
        solve( !KU( sign(<m, e_v2v>, ~ps_key) ) @ #vk.4 )
          case TC_sign_message_case_1
          solve( !KU( ~m ) @ #vk.3 )
            case TC_sign_message
            by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
          qed
        next
          case TC_sign_message_case_2
          solve( !KU( sign(<prl, e_v2v>, ~ltk) ) @ #vk.8 )
            case RA_generate_heartbeat_case_1
            solve( !KU( ~m ) @ #vk.4 )
              case TC_sign_message
              solve( (¬(#k < #vr.5))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                case case_1
                by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case RA_generate_heartbeat_case_2
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_3
            solve( !KU( ~m ) @ #vk.4 )
              case TC_sign_message
              solve( (¬(#vr.7 < #k))  ∥ (∀ z. (('1'+e) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (¬(#k < #vr.5))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+'1'+e) = ('1'+e.1))  ∥ (∃ z. (('1'+'1'+e) = ('1'+z+e.1))) )
                    case case_1
                    solve( !Epoch( 'RA', ('1'+e) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (('1'+e) = ('1'+e_rev))  ∥ (∃ z. (('1'+e) = ('1'+e_rev+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case RA_generate_heartbeat_case_4
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_5
            by contradiction /* from formulas */
          next
            case c_sign
            by solve( !KU( ~ltk ) @ #vk.9 )
          qed
        next
          case c_sign
          by solve( !KU( ~ps_key ) @ #vk.5 )
        qed
      qed
    qed
  qed
next
  case Init_case_2
  solve( !Pseudonym( pk(~ps_key) ) ▶₁ #k )
    case Init
    solve( !PRL( prl, cnt ) ▶₂ #k )
      case Init
      solve( !Parameters( tol ) ▶₁ #i )
        case Init
        solve( !KU( sign(<m, e_v2v>, ~ps_key) ) @ #vk.4 )
          case TC_sign_message_case_1
          solve( !KU( ~m ) @ #vk.3 )
            case TC_sign_message
            by solve( (('1'+'1'+'1') = ('1'+e))  ∥
                      (∃ z. (('1'+'1'+'1') = ('1'+e+z))) )
          qed
        next
          case TC_sign_message_case_2
          solve( !KU( ~m ) @ #vk.3 )
            case TC_sign_message
            by solve( (('1'+'1'+'1'+x) = ('1'+e))  ∥
                      (∃ z. (('1'+'1'+'1'+x) = ('1'+e+z))) )
          qed
        next
          case TC_sign_message_case_3
          solve( !KU( ~m ) @ #vk.3 )
            case TC_sign_message
            solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
              case RA_advance_epoch
              solve( (¬(#vr.6 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by solve( (('1'+'1'+tol) = ('1'+'1'+x))  ∥
                          (∃ z. (('1'+'1'+tol) = ('1'+'1'+x+z))) )
              next
                case case_2
                by solve( (('1'+'1'+tol) = ('1'+'1'+x))  ∥
                          (∃ z. (('1'+'1'+tol) = ('1'+'1'+x+z))) )
              qed
            qed
          qed
        next
          case TC_sign_message_case_4
          solve( !KU( sign(<prl, e_v2v>, ~ltk) ) @ #vk.8 )
            case RA_generate_heartbeat_case_1
            solve( !KU( ~m ) @ #vk.4 )
              case TC_sign_message
              solve( (¬(#k < #vr.5))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                case case_1
                by solve( (('1'+'1'+'1') = ('1'+e))  ∥
                          (∃ z. (('1'+'1'+'1') = ('1'+e+z))) )
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case RA_generate_heartbeat_case_2
            solve( !KU( ~m ) @ #vk.4 )
              case TC_sign_message
              solve( (¬(#k < #vr.5))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                case case_1
                by solve( (('1'+'1'+'1'+x) = ('1'+e))  ∥
                          (∃ z. (('1'+'1'+'1'+x) = ('1'+e+z))) )
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case RA_generate_heartbeat_case_3
            solve( !KU( ~m ) @ #vk.4 )
              case TC_sign_message
              solve( (¬(#k < #vr.5))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                case case_1
                solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                  case RA_advance_epoch
                  solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                    case case_1
                    by solve( (('1'+'1'+tol) = ('1'+'1'+x))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+'1'+x+z))) )
                  next
                    case case_2
                    by solve( (('1'+'1'+tol) = ('1'+'1'+x))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+'1'+x+z))) )
                  qed
                qed
              next
                case case_2
                by contradiction /* from formulas */
              qed
            qed
          next
            case RA_generate_heartbeat_case_4
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_5
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_6
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_7
            solve( !KU( ~m ) @ #vk.4 )
              case TC_sign_message
              solve( (¬(#vr.7 < #k))  ∥ (∀ z. (('1'+e) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (¬(#k < #vr.5))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+'1'+e+tol) = ('1'+e.1))  ∥
                         (∃ z. (('1'+'1'+e+tol) = ('1'+z+e.1))) )
                    case case_1
                    solve( !Epoch( 'RA', ('1'+e+tol) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+e+tol) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( (('1'+e+tol) = ('1'+e_rev+tol))  ∥
                               (∃ z. (('1'+e+tol) = ('1'+e_rev+tol+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( (('1'+e+tol) = ('1'+e_rev+tol))  ∥
                               (∃ z. (('1'+e+tol) = ('1'+e_rev+tol+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_01
                    solve( (('1'+e+tol) = ('1'+'1'+e))  ∥
                           (∃ z. (('1'+e+tol) = ('1'+'1'+e+z))) )
                      case case_1
                      solve( (e = ('1'+'1'+e_rev))  ∥ (∃ z. (e = ('1'+'1'+e_rev+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( TolTmp( ('1'+z) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( (e = ('1'+'1'+e_rev+z))  ∥ (∃ z.1. (e = ('1'+'1'+e_rev+z+z.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_02
                    solve( !Epoch( 'RA', ('1'+e) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (('1'+e) = ('1'+e_rev+tol))  ∥
                             (∃ z. (('1'+e) = ('1'+e_rev+tol+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_03
                    solve( !Epoch( 'RA', ('1'+e) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (('1'+e) = ('1'+'1'+e_rev))  ∥
                             (∃ z. (('1'+e) = ('1'+'1'+e_rev+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_04
                    solve( !Epoch( 'RA', ('1'+e+x) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+e+x) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( TolTmp( ('1'+x) ) ▶₀ #vr.1 )
                          case increment_tol
                          solve( (('1'+e+x) = ('1'+'1'+e_rev+x))  ∥
                                 (∃ z. (('1'+e+x) = ('1'+'1'+e_rev+x+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( TolTmp( ('1'+x) ) ▶₀ #vr.1 )
                          case increment_tol
                          solve( (('1'+e+x) = ('1'+'1'+e_rev+x))  ∥
                                 (∃ z. (('1'+e+x) = ('1'+'1'+e_rev+x+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2_case_05
                    solve( !Epoch( 'RA', ('1'+e+x) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+e+x) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( (('1'+e+x) = ('1'+e_rev+x+z))  ∥
                               (∃ z.1. (('1'+e+x) = ('1'+e_rev+x+z+z.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( (('1'+e+x) = ('1'+e_rev+x+z))  ∥
                               (∃ z.1. (('1'+e+x) = ('1'+e_rev+x+z+z.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_06
                    solve( !Epoch( 'RA', ('1'+e) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( TolTmp( ('1'+x) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( (('1'+e) = ('1'+'1'+e_rev+x))  ∥
                               (∃ z. (('1'+e) = ('1'+'1'+e_rev+x+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_07
                    solve( TolTmp( ('1'+x) ) ▶₀ #vr.1 )
                      case increment_tol
                      solve( ((e+x) = ('1'+'1'+e_rev+x))  ∥
                             (∃ z. ((e+x) = ('1'+'1'+e_rev+x+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_08
                    solve( TolTmp( ('1'+x+x.1) ) ▶₀ #vr.1 )
                      case increment_tol
                      solve( ((e+x) = ('1'+'1'+e_rev+x+x.1))  ∥
                             (∃ z. ((e+x) = ('1'+'1'+e_rev+x+z+x.1))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_09
                    solve( !Epoch( 'RA', ('1'+e+x.1) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+e+x.1) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( TolTmp( ('1'+x+x.1) ) ▶₀ #vr.1 )
                          case increment_tol
                          solve( (('1'+e+x.1) = ('1'+'1'+e_rev+x+x.1))  ∥
                                 (∃ z. (('1'+e+x.1) = ('1'+'1'+e_rev+x+z+x.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( TolTmp( ('1'+x+x.1) ) ▶₀ #vr.1 )
                          case increment_tol
                          solve( (('1'+e+x.1) = ('1'+'1'+e_rev+x+x.1))  ∥
                                 (∃ z. (('1'+e+x.1) = ('1'+'1'+e_rev+x+z+x.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2_case_10
                    solve( (('1'+e+tol) = ('1'+'1'+e+x))  ∥
                           (∃ z. (('1'+e+tol) = ('1'+'1'+e+x+z))) )
                      case case_1
                      solve( TolTmp( ('1'+x) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( (e = ('1'+'1'+e_rev+x))  ∥ (∃ z. (e = ('1'+'1'+e_rev+x+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( TolTmp( ('1'+x+z) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( (e = ('1'+'1'+e_rev+x+z))  ∥
                               (∃ z.1. (e = ('1'+'1'+e_rev+x+z+z.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_11
                    solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( (('1'+'1'+tol+x) = ('1'+'1'+x+x.1))  ∥
                               (∃ z. (('1'+'1'+tol+x) = ('1'+'1'+x+z+x.1))) )
                          case case_1
                          solve( (('1'+x) = ('1'+e_rev+tol))  ∥
                                 (∃ z. (('1'+x) = ('1'+e_rev+tol+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2
                          solve( (('1'+x) = ('1'+e_rev+z+x.1))  ∥
                                 (∃ z.1. (('1'+x) = ('1'+e_rev+z+x.1+z.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( (('1'+'1'+tol+x) = ('1'+'1'+x+x.1))  ∥
                               (∃ z. (('1'+'1'+tol+x) = ('1'+'1'+x+z+x.1))) )
                          case case_1
                          solve( (('1'+x) = ('1'+e_rev+tol))  ∥
                                 (∃ z. (('1'+x) = ('1'+e_rev+tol+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2
                          solve( (('1'+x) = ('1'+e_rev+z+x.1))  ∥
                                 (∃ z.1. (('1'+x) = ('1'+e_rev+z+x.1+z.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2_case_12
                    solve( !Epoch( 'RA', ('1'+tol+x) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+tol+x) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( (('1'+'1'+tol+tol+x) = ('1'+'1'+x+z))  ∥
                               (∃ z.1. (('1'+'1'+tol+tol+x) = ('1'+'1'+x+z+z.1))) )
                          case case_1
                          solve( (('1'+tol+x) = ('1'+e_rev+tol))  ∥
                                 (∃ z. (('1'+tol+x) = ('1'+e_rev+tol+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_1
                          by contradiction /* cyclic */
                        next
                          case case_2_case_2
                          solve( (('1'+x+z+x.1) = ('1'+e_rev+z+x.1))  ∥
                                 (∃ z.1. (('1'+x+z+x.1) = ('1'+e_rev+z+x.1+z.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_3
                          solve( (('1'+x+x.1+x.2) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1+x.2) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_4
                          solve( (('1'+x+z+x.1) = ('1'+e_rev+z+x.1))  ∥
                                 (∃ z.1. (('1'+x+z+x.1) = ('1'+e_rev+z+x.1+z.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_5
                          solve( (('1'+x+x.1+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( (('1'+'1'+tol+tol+x) = ('1'+'1'+x+z))  ∥
                               (∃ z.1. (('1'+'1'+tol+tol+x) = ('1'+'1'+x+z+z.1))) )
                          case case_1
                          solve( (('1'+tol+x) = ('1'+e_rev+tol))  ∥
                                 (∃ z. (('1'+tol+x) = ('1'+e_rev+tol+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_1
                          solve( (('1'+tol+x) = ('1'+e_rev+tol))  ∥
                                 (∃ z. (('1'+tol+x) = ('1'+e_rev+tol+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_2
                          solve( (('1'+x+z+x.1) = ('1'+e_rev+z+x.1))  ∥
                                 (∃ z.1. (('1'+x+z+x.1) = ('1'+e_rev+z+x.1+z.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_3
                          solve( (('1'+x+x.1+x.2) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1+x.2) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_4
                          solve( (('1'+x+z+x.1) = ('1'+e_rev+z+x.1))  ∥
                                 (∃ z.1. (('1'+x+z+x.1) = ('1'+e_rev+z+x.1+z.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_5
                          solve( (('1'+x+x.1+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2_case_13
                    solve( (('1'+tol+tol+x) = ('1'+'1'+x+x.1))  ∥
                           (∃ z. (('1'+tol+tol+x) = ('1'+'1'+x+z+x.1))) )
                      case case_1_case_1
                      solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( (('1'+x) = ('1'+'1'+e_rev))  ∥
                                 (∃ z. (('1'+x) = ('1'+'1'+e_rev+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2
                          solve( (('1'+x) = ('1'+'1'+e_rev))  ∥
                                 (∃ z. (('1'+x) = ('1'+'1'+e_rev+z))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_1_case_2
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_01
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_02
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                          case increment_tol
                          solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2_case_03
                      solve( !Epoch( 'RA', ('1'+x+z) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z.1. (('1'+x+z) = (e_rev+z.1)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+z) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z) = ('1'+'1'+e_rev+z))  ∥
                                   (∃ z.1. (('1'+x+z) = ('1'+'1'+e_rev+z+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+z) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z) = ('1'+'1'+e_rev+z))  ∥
                                   (∃ z.1. (('1'+x+z) = ('1'+'1'+e_rev+z+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_04
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_05
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_06
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_07
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_08
                      solve( !Epoch( 'RA', ('1'+x+z+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z.1. (('1'+x+z+x.1) = (e_rev+z.1)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z+x.1) = ('1'+'1'+e_rev+z+x.1))  ∥
                                   (∃ z.1. (('1'+x+z+x.1) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z+x.1) = ('1'+'1'+e_rev+z+x.1))  ∥
                                   (∃ z.1. (('1'+x+z+x.1) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_09
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_10
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_11
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_12
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2_case_14
                    solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                      case RA_advance_epoch
                      solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                        case case_1
                        solve( (('1'+'1'+x+x.2+x.2+x.3) = ('1'+'1'+x+x.1))  ∥
                               (∃ z. (('1'+'1'+x+x.2+x.2+x.3) = ('1'+'1'+x+z+x.1))) )
                          case case_1
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_01
                          solve( (('1'+x+x.2) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.2) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_02
                          solve( (('1'+x+x.2) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.2) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_03
                          by contradiction /* cyclic */
                        next
                          case case_2_case_04
                          solve( (('1'+x+x.1+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_05
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_06
                          solve( (('1'+x+z+x.2) = ('1'+e_rev+z+x.1+x.2))  ∥
                                 (∃ z.1. (('1'+x+z+x.2) = ('1'+e_rev+z+x.1+z.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_07
                          solve( (('1'+x+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_08
                          solve( (('1'+x+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_09
                          solve( (('1'+x+x.2+x.3+x.4) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.2+x.3+x.4) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_10
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_11
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_12
                          solve( (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))  ∥
                                 (∃ z.1. (('1'+x+x.1) = ('1'+e_rev+z+x.1+z.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_13
                          solve( (('1'+x+x.1+x.2) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.2) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_14
                          solve( (('1'+x+x.1+x.2) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.1+x.2) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_15
                          solve( (('1'+x+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_16
                          solve( (('1'+x+x.1+x.3) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.1+x.3) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_17
                          solve( (('1'+x+x.2+x.3+x.5) = ('1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                                 (∃ z. (('1'+x+x.2+x.3+x.5) = ('1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_18
                          solve( (('1'+x+x.1+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_19
                          solve( (('1'+x+x.1+x.2+x.4) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.1+x.2+x.4) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( (('1'+'1'+x+x.2+x.2+x.3) = ('1'+'1'+x+x.1))  ∥
                               (∃ z. (('1'+'1'+x+x.2+x.2+x.3) = ('1'+'1'+x+z+x.1))) )
                          case case_1
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_01
                          solve( (('1'+x+x.2) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.2) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_02
                          solve( (('1'+x+x.2) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.2) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_03
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_04
                          solve( (('1'+x+x.1+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_05
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_06
                          solve( (('1'+x+z+x.2) = ('1'+e_rev+z+x.1+x.2))  ∥
                                 (∃ z.1. (('1'+x+z+x.2) = ('1'+e_rev+z+x.1+z.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_07
                          solve( (('1'+x+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_08
                          solve( (('1'+x+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_09
                          solve( (('1'+x+x.2+x.3+x.4) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.2+x.3+x.4) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_10
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_11
                          solve( (('1'+x+x.1) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_12
                          solve( (('1'+x+x.1) = ('1'+e_rev+z+x.1+x.2))  ∥
                                 (∃ z.1. (('1'+x+x.1) = ('1'+e_rev+z+x.1+z.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_13
                          solve( (('1'+x+x.1+x.2) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.2) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_14
                          solve( (('1'+x+x.1+x.2) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.1+x.2) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_15
                          solve( (('1'+x+x.2+x.3) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.2+x.3) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_16
                          solve( (('1'+x+x.1+x.3) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.1+x.3) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_17
                          solve( (('1'+x+x.2+x.3+x.5) = ('1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                                 (∃ z. (('1'+x+x.2+x.3+x.5) = ('1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_18
                          solve( (('1'+x+x.1+x.3) = ('1'+e_rev+x.1+x.2+x.3))  ∥
                                 (∃ z. (('1'+x+x.1+x.3) = ('1'+e_rev+z+x.1+x.2+x.3))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2_case_19
                          solve( (('1'+x+x.1+x.2+x.4) = ('1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                 (∃ z. (('1'+x+x.1+x.2+x.4) = ('1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2_case_15
                    solve( (('1'+x+x.2+x.2+x.3) = ('1'+'1'+x+x.1))  ∥
                           (∃ z. (('1'+x+x.2+x.2+x.3) = ('1'+'1'+x+z+x.1))) )
                      case case_1_case_1
                      solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_1_case_2
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_1_case_3
                      solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                               (∃ z. ((x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_1_case_4
                      solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                               (∃ z. ((x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_01
                      solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_02
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_03
                      solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_04
                      solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_05
                      solve( TolTmp( ('1'+x.1) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+x.1))  ∥
                               (∃ z. ((x+x.1) = ('1'+'1'+e_rev+z+x.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_06
                      solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                               (∃ z. ((x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_07
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_08
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_09
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_10
                      solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                               (∃ z. ((x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_11
                      solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                               (∃ z. ((x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_12
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                          case increment_tol
                          solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                 (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case case_2_case_13
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_14
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_15
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_16
                      solve( !Epoch( 'RA', ('1'+x+z) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z.1. (('1'+x+z) = (e_rev+z.1)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z) = ('1'+'1'+e_rev+z+x.1))  ∥
                                   (∃ z.1. (('1'+x+z) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z) = ('1'+'1'+e_rev+z+x.1))  ∥
                                   (∃ z.1. (('1'+x+z) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_17
                      solve( !Epoch( 'RA', ('1'+x+z+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z.1. (('1'+x+z+x.2) = (e_rev+z.1)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+z+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))  ∥
                                   (∃ z.1. (('1'+x+z+x.2) = ('1'+'1'+e_rev+z+x.1+z.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+z+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+z+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))  ∥
                                   (∃ z.1. (('1'+x+z+x.2) = ('1'+'1'+e_rev+z+x.1+z.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_18
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_19
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_20
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_21
                      solve( !Epoch( 'RA', ('1'+x) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+z+x.1))  ∥
                                   (∃ z.1. (('1'+x) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x) = ('1'+'1'+e_rev+z+x.1))  ∥
                                   (∃ z.1. (('1'+x) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_22
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_23
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_24
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_25
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_26
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_27
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+z+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))  ∥
                                   (∃ z.1. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+z.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+z+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))  ∥
                                   (∃ z.1. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+z.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_28
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_29
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_30
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_31
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3+x.5) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3+x.5) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4+x.5) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4+x.5) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_32
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_33
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_34
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_35
                      solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                               (∃ z. ((x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_36
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_37
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_38
                      solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+z+x.1) = ('1'+'1'+e_rev+z+x.1))  ∥
                               (∃ z.1. ((x+z+x.1) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_39
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_40
                      solve( TolTmp( ('1'+z+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+z+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))  ∥
                               (∃ z.1. ((x+z+x.1) = ('1'+'1'+e_rev+z+x.1+z.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_41
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_42
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_43
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_44
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_45
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_46
                      solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.2+x.3+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                               (∃ z. ((x+x.2+x.3+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_47
                      solve( TolTmp( ('1'+z+x.1) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+z+x.1))  ∥
                               (∃ z.1. ((x+x.1) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_48
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_49
                      solve( TolTmp( ('1'+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2))  ∥
                               (∃ z. ((x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_50
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_51
                      solve( !Epoch( 'RA', ('1'+x+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_52
                      solve( TolTmp( ('1'+z+x.1+x.2) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2))  ∥
                               (∃ z.1. ((x+x.1) = ('1'+'1'+e_rev+z+x.1+z.1+x.2))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_53
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_54
                      solve( !Epoch( 'RA', ('1'+x+x.1) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_55
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.1+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_56
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_57
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_58
                      solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                               (∃ z. ((x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_59
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_60
                      solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.2+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                               (∃ z. ((x+x.2+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_61
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_62
                      solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                               (∃ z. ((x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_63
                      solve( !Epoch( 'RA', ('1'+x+x.2+x.3+x.5) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.2+x.3+x.5) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4+x.5) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4+x.5) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                                   (∃ z. (('1'+x+x.2+x.3+x.5) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_64
                      solve( TolTmp( ('1'+x.1+x.2+x.3+x.4+x.5) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4+x.5))  ∥
                               (∃ z. ((x+x.1+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4+x.5))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_65
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.3) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.3) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                                   (∃ z. (('1'+x+x.1+x.3) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_66
                      solve( TolTmp( ('1'+x.1+x.2+x.3) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2) = ('1'+'1'+e_rev+x.1+x.2+x.3))  ∥
                               (∃ z. ((x+x.1+x.2) = ('1'+'1'+e_rev+z+x.1+x.2+x.3))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2_case_67
                      solve( !Epoch( 'RA', ('1'+x+x.1+x.2+x.4) ) ▶₃ #i )
                        case RA_advance_epoch
                        solve( (¬(#vr.10 < #k))  ∥ (∀ z. (('1'+x+x.1+x.2+x.4) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                            case increment_tol
                            solve( (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                                   (∃ z. (('1'+x+x.1+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case case_2_case_68
                      solve( TolTmp( ('1'+x.1+x.2+x.3+x.4) ) ▶₀ #vr.1 )
                        case increment_tol
                        solve( ((x+x.1+x.2+x.4) = ('1'+'1'+e_rev+x.1+x.2+x.3+x.4))  ∥
                               (∃ z. ((x+x.1+x.2+x.4) = ('1'+'1'+e_rev+z+x.1+x.2+x.3+x.4))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case RA_generate_heartbeat_case_8
            by contradiction /* from formulas */
          next
            case RA_generate_heartbeat_case_9
            by contradiction /* from formulas */
          next
            case c_sign
            by solve( !KU( ~ltk ) @ #vk.9 )
          qed
        next
          case c_sign
          by solve( !KU( ~ps_key ) @ #vk.5 )
        qed
      qed
    qed
  qed
qed

lemma no_heartbeats_processed_after_tolerance [heuristic=o "oracle.py"]:
  all-traces
  "∀ prl e_hb #i.
    (HeartbeatProcessed( <prl, e_hb> ) @ #i) ⇒
    (∃ tol #j.
      ((SystemInitialized( tol ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ps e_rev #k.
           ((RevocationIssued( ps, e_rev ) @ #k) ∧ (#k < #i)) ∧
           ((e_hb = ('1'+e_rev+tol)) ∨ (∃ z. e_hb = ('1'+e_rev+tol+z))))) ∨
       (∃ ps e #k. (PseudonymRevoked( ps, e ) @ #k) ∧ (#k < #i))))"
/*
guarded formula characterizing all counter-examples:
"∃ prl e_hb #i.
  (HeartbeatProcessed( <prl, e_hb> ) @ #i)
 ∧
  ∀ tol #j.
   (SystemInitialized( tol ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ps e_rev #k.
       (RevocationIssued( ps, e_rev ) @ #k)
      ∧
       (#k < #i) ∧
       (((e_hb = ('1'+e_rev+tol)) ∨ (∃ z. (e_hb = ('1'+e_rev+tol+z)))))) ∧
     (∀ ps e #k. (PseudonymRevoked( ps, e ) @ #k) ⇒ ¬(#k < #i))))"
*/
simplify
solve( HeartbeatProcessed( <prl, e_hb> ) @ #i )
  case TC_process_heartbeat_no_revoke
  solve( !Pseudonym( ps ) ▶₂ #i )
    case Init_case_1
    solve( !Pseudonym( ps ) ▶₁ #k )
      case Init
      solve( !Pk( 'RA', pk(x) ) ▶₃ #i )
        case Init
        solve( !PRL( prl.1, cnt ) ▶₂ #k )
          case Init
          solve( !Parameters( tol ) ▶₁ #i )
            case Init
            solve( !KU( sign(<prl, e_hb>, ~ltk) ) @ #vk.4 )
              case RA_generate_heartbeat_case_1
              solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (¬(#k < #vr.2))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.10 )
                        case RA_generate_heartbeat_case_1
                        solve( (('1'+e) = ('1'+'1'+e_rev))  ∥
                               (∃ z. (('1'+e) = ('1'+'1'+e_rev+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.11 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+e_rev))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+e_rev+z))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_3
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.13 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.6))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+e_rev))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+e_rev+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.14 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case RA_generate_heartbeat_case_2
              by contradiction /* from formulas */
            next
              case RA_generate_heartbeat_case_3
              by contradiction /* from formulas */
            next
              case c_sign
              by solve( !KU( ~ltk ) @ #vk.5 )
            qed
          qed
        qed
      qed
    qed
  next
    case Init_case_2
    solve( !Pseudonym( ps ) ▶₁ #k )
      case Init
      solve( !Pk( 'RA', pk(x) ) ▶₃ #i )
        case Init
        solve( !PRL( prl.1, cnt ) ▶₂ #k )
          case Init
          solve( !Parameters( tol ) ▶₁ #i )
            case Init
            solve( !KU( sign(<prl, e_hb>, ~ltk) ) @ #vk.4 )
              case RA_generate_heartbeat_case_1
              solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (¬(#k < #vr.2))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.10 )
                        case RA_generate_heartbeat_case_1
                        solve( (('1'+e) = ('1'+'1'+e_rev+tol))  ∥
                               (∃ z. (('1'+e) = ('1'+'1'+e_rev+tol+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.11 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1'+tol) = ('1'+e))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+e_rev+tol))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+e_rev+tol+z))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_3
                    solve( (('1'+e+tol) = ('1'+e+x))  ∥ (∃ z. (('1'+e+tol) = ('1'+e+x+z))) )
                      case case_1
                      solve( (('1'+e+tol) = ('1'+'1'+e_rev+tol))  ∥
                             (∃ z. (('1'+e+tol) = ('1'+'1'+e_rev+tol+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( (('1'+e+x) = ('1'+'1'+e_rev+x+z))  ∥
                             (∃ z.1. (('1'+e+x) = ('1'+'1'+e_rev+x+z+z.1))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_4
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.13 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.6))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+tol+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+tol+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+tol+x) = ('1'+'1'+e_rev+tol))  ∥
                                     (∃ z. (('1'+'1'+tol+x) = ('1'+'1'+e_rev+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+e_rev+tol))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+e_rev+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_2
                              solve( (('1'+tol+x) = ('1'+'1'+e_rev+tol))  ∥
                                     (∃ z. (('1'+tol+x) = ('1'+'1'+e_rev+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_3
                              solve( (('1'+x+z) = ('1'+'1'+e_rev+z+x.1))  ∥
                                     (∃ z.1. (('1'+x+z) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_4
                              solve( (('1'+'1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))  ∥
                                     (∃ z.1. (('1'+'1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.14 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case RA_generate_heartbeat_case_2
              by contradiction /* from formulas */
            next
              case RA_generate_heartbeat_case_3
              by contradiction /* from formulas */
            next
              case c_sign
              by solve( !KU( ~ltk ) @ #vk.5 )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case TC_process_heartbeat_revoke
  solve( !Pseudonym( ps ) ▶₂ #i )
    case Init_case_1
    solve( !Pseudonym( ps ) ▶₁ #k )
      case Init
      solve( !Pk( 'RA', pk(x) ) ▶₃ #i )
        case Init
        solve( !PRL( prl.1, cnt ) ▶₂ #k )
          case Init
          solve( !Parameters( tol ) ▶₁ #i )
            case Init
            solve( !KU( sign(<prl, e_hb>, ~ltk) ) @ #vk.4 )
              case RA_generate_heartbeat_case_1
              solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (¬(#k < #vr.2))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.10 )
                        case RA_generate_heartbeat_case_1
                        solve( (('1'+e) = ('1'+'1'+e_rev))  ∥
                               (∃ z. (('1'+e) = ('1'+'1'+e_rev+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.11 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+e_rev))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+e_rev+z))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_3
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.13 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.6))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+e_rev))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+e_rev+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.14 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case RA_generate_heartbeat_case_2
              solve( !KU( pk(~ps_key) ) @ #vk.6 )
                case Init
                solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.12 )
                        case RA_generate_heartbeat_case_1
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.13 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+'1'))  ∥ (∃ z. (('1'+e) = ('1'+'1'+'1'+z))) )
                      case case_1
                      solve( !Epoch( 'TC', ('1'+'1') ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1')>, ~ltk) ) @ #vk.12 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.13 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( !Epoch( 'TC', ('1'+'1'+z) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+z)>, ~ltk) ) @ #vk.13 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+z) = ('1'+z.1)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.14 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_3
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.15 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+x) = ('1'+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.16 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case c_pk
                by solve( !KU( ~ps_key ) @ #vk.9 )
              qed
            next
              case RA_generate_heartbeat_case_3
              solve( !KU( pk(~ps_key) ) @ #vk.6 )
                case Init
                solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = ('1'+z+e.2)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.12 )
                        case RA_generate_heartbeat_case_1
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.13 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+'1'+e.1))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+'1'+z+e.1))) )
                      case case_1
                      solve( !Epoch( 'TC', ('1'+'1'+e) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+e)>, ~ltk) ) @ #vk.13 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+'1'+e) = ('1'+e+z)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.14 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( !Epoch( 'TC', ('1'+'1'+e+z) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+e+z)>, ~ltk) ) @ #vk.14 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.9 < #k))  ∥ (∀ z.1. (('1'+'1'+e+z) = ('1'+e+z.1)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.15 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_3
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.15 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+x) = ('1'+e+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.7))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+'1'+e))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+'1'+e+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.16 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.12 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#k < #vr.7))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                          case case_1
                          solve( (('1'+e) = ('1'+'1'+'1'+e.1))  ∥
                                 (∃ z. (('1'+e) = ('1'+'1'+'1'+z+e.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.13 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1') = ('1'+e))  ∥ (∃ z. (('1'+'1') = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+'1'+e.1))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+'1'+z+e.1))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_3
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.15 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+x) = ('1'+e+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.7))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+'1'+e))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+'1'+e+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.16 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_pk
                by solve( !KU( ~ps_key ) @ #vk.9 )
              qed
            next
              case c_sign
              by solve( !KU( ~ltk ) @ #vk.5 )
            qed
          qed
        qed
      qed
    qed
  next
    case Init_case_2
    solve( !Pseudonym( ps ) ▶₁ #k )
      case Init
      solve( !Pk( 'RA', pk(x) ) ▶₃ #i )
        case Init
        solve( !PRL( prl.1, cnt ) ▶₂ #k )
          case Init
          solve( !Parameters( tol ) ▶₁ #i )
            case Init
            solve( !KU( sign(<prl, e_hb>, ~ltk) ) @ #vk.4 )
              case RA_generate_heartbeat_case_1
              solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = (e_rev+z)) ⇒ ⊥) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                solve( (¬(#k < #vr.2))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.10 )
                        case RA_generate_heartbeat_case_1
                        solve( (('1'+e) = ('1'+'1'+e_rev+tol))  ∥
                               (∃ z. (('1'+e) = ('1'+'1'+e_rev+tol+z))) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.11 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1'+tol) = ('1'+e))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+e_rev+tol))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+e_rev+tol+z))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_3
                    solve( (('1'+e+tol) = ('1'+e+x))  ∥ (∃ z. (('1'+e+tol) = ('1'+e+x+z))) )
                      case case_1
                      solve( (('1'+e+tol) = ('1'+'1'+e_rev+tol))  ∥
                             (∃ z. (('1'+e+tol) = ('1'+'1'+e_rev+tol+z))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( (('1'+e+x) = ('1'+'1'+e_rev+x+z))  ∥
                             (∃ z.1. (('1'+e+x) = ('1'+'1'+e_rev+x+z+z.1))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_4
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.13 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+x) = (e_rev+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.6))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+tol+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+tol+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+tol+x) = ('1'+'1'+e_rev+tol))  ∥
                                     (∃ z. (('1'+'1'+tol+x) = ('1'+'1'+e_rev+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+e_rev+tol))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+e_rev+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_2
                              solve( (('1'+tol+x) = ('1'+'1'+e_rev+tol))  ∥
                                     (∃ z. (('1'+tol+x) = ('1'+'1'+e_rev+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_3
                              solve( (('1'+x+z) = ('1'+'1'+e_rev+z+x.1))  ∥
                                     (∃ z.1. (('1'+x+z) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_4
                              solve( (('1'+'1'+x+x.1) = ('1'+'1'+e_rev+z+x.1))  ∥
                                     (∃ z.1. (('1'+'1'+x+x.1) = ('1'+'1'+e_rev+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_3
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.14 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case RA_generate_heartbeat_case_2
              solve( !KU( pk(~ps_key) ) @ #vk.6 )
                case Init
                solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = ('1'+z)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.12 )
                        case RA_generate_heartbeat_case_1
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.13 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1'+tol) = ('1'+e))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+'1'+tol))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+'1'+tol+z))) )
                      case case_1
                      solve( !Epoch( 'TC', ('1'+'1'+tol) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+tol)>, ~ltk) ) @ #vk.13 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+'1'+tol) = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.14 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( !Epoch( 'TC', ('1'+'1'+tol+z) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+tol+z)>, ~ltk) ) @ #vk.14 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+tol+z) = ('1'+z.1)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.15 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_3
                    solve( (('1'+e+tol) = ('1'+e+x))  ∥ (∃ z. (('1'+e+tol) = ('1'+e+x+z))) )
                      case case_1
                      solve( (('1'+e+tol) = ('1'+'1'+'1'+tol))  ∥
                             (∃ z. (('1'+e+tol) = ('1'+'1'+'1'+tol+z))) )
                        case case_1
                        solve( !Epoch( 'TC', ('1'+'1') ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke_case_1
                          solve( !KU( sign(<prl, ('1'+'1')>, ~ltk) ) @ #vk.14 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.15 )
                          qed
                        next
                          case TC_process_heartbeat_no_revoke_case_2
                          solve( !KU( sign(<prl, ('1'+'1')>, ~ltk) ) @ #vk.13 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.14 )
                          qed
                        next
                          case TC_process_heartbeat_no_revoke_case_3
                          solve( !KU( sign(<prl, ('1'+'1')>, ~ltk) ) @ #vk.14 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.16 )
                          qed
                        next
                          case TC_process_heartbeat_no_revoke_case_4
                          solve( !KU( sign(<prl, ('1'+'1')>, ~ltk) ) @ #vk.14 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.15 )
                          qed
                        next
                          case TC_process_heartbeat_revoke_case_1
                          by contradiction /* from formulas */
                        next
                          case TC_process_heartbeat_revoke_case_2
                          by contradiction /* from formulas */
                        next
                          case TC_process_heartbeat_revoke_case_3
                          by contradiction /* from formulas */
                        next
                          case TC_process_heartbeat_revoke_case_4
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( !Epoch( 'TC', ('1'+'1'+z) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke
                          solve( !KU( sign(<prl, ('1'+'1'+z)>, ~ltk) ) @ #vk.15 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+z) = ('1'+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.16 )
                          qed
                        next
                          case TC_process_heartbeat_revoke
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( (('1'+e+x) = ('1'+'1'+'1'+x+z))  ∥
                             (∃ z.1. (('1'+e+x) = ('1'+'1'+'1'+x+z+z.1))) )
                        case case_1
                        solve( !Epoch( 'TC', ('1'+'1'+z) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke_case_1
                          solve( !KU( sign(<prl, ('1'+'1'+z)>, ~ltk) ) @ #vk.15 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+z) = ('1'+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.16 )
                          qed
                        next
                          case TC_process_heartbeat_no_revoke_case_2
                          solve( !KU( sign(<prl, ('1'+'1'+z)>, ~ltk) ) @ #vk.14 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+z) = ('1'+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.15 )
                          qed
                        next
                          case TC_process_heartbeat_no_revoke_case_3
                          solve( !KU( sign(<prl, ('1'+'1'+z)>, ~ltk) ) @ #vk.15 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+z) = ('1'+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.17 )
                          qed
                        next
                          case TC_process_heartbeat_no_revoke_case_4
                          solve( !KU( sign(<prl, ('1'+'1'+z)>, ~ltk) ) @ #vk.15 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z.1. (('1'+'1'+z) = ('1'+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.16 )
                          qed
                        next
                          case TC_process_heartbeat_revoke_case_1
                          by contradiction /* from formulas */
                        next
                          case TC_process_heartbeat_revoke_case_2
                          by contradiction /* from formulas */
                        next
                          case TC_process_heartbeat_revoke_case_3
                          by contradiction /* from formulas */
                        next
                          case TC_process_heartbeat_revoke_case_4
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( !Epoch( 'TC', ('1'+'1'+z+z.1) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke
                          solve( !KU( sign(<prl, ('1'+'1'+z+z.1)>, ~ltk) ) @ #vk.16 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.8 < #k))  ∥ (∀ z.2. (('1'+'1'+z+z.1) = ('1'+z.2)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.17 )
                          qed
                        next
                          case TC_process_heartbeat_revoke
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_4
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.15 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.8 < #k))  ∥ (∀ z. (('1'+x) = ('1'+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.16 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  by contradiction /* from formulas */
                qed
              next
                case c_pk
                by solve( !KU( ~ps_key ) @ #vk.9 )
              qed
            next
              case RA_generate_heartbeat_case_3
              solve( !KU( pk(~ps_key) ) @ #vk.6 )
                case Init
                solve( (¬(#vr.4 < #k))  ∥ (∀ z. (('1'+e.1) = ('1'+z+e.2)) ⇒ ⊥) )
                  case case_1
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.12 )
                        case RA_generate_heartbeat_case_1
                        by contradiction /* from formulas */
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.13 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1'+tol) = ('1'+e))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+'1'+tol+e.1))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+'1'+tol+z+e.1))) )
                      case case_1
                      solve( !Epoch( 'TC', ('1'+'1'+e+tol) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+e+tol)>, ~ltk) ) @ #vk.14 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+'1'+e+tol) = ('1'+e+z)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.15 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( !Epoch( 'TC', ('1'+'1'+e+tol+z) ) ▶₀ #i )
                        case TC_process_heartbeat_no_revoke
                        solve( !KU( sign(<prl, ('1'+'1'+e+tol+z)>, ~ltk) ) @ #vk.15 )
                          case RA_generate_heartbeat_case_1
                          solve( (¬(#vr.9 < #k))  ∥
                                 (∀ z.1. (('1'+'1'+e+tol+z) = ('1'+e+z.1)) ⇒ ⊥) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case RA_generate_heartbeat_case_2
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by solve( !KU( ~ltk ) @ #vk.16 )
                        qed
                      next
                        case TC_process_heartbeat_revoke
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_3
                    solve( (('1'+e+tol) = ('1'+e+x))  ∥ (∃ z. (('1'+e+tol) = ('1'+e+x+z))) )
                      case case_1
                      solve( (('1'+e+tol) = ('1'+'1'+'1'+tol+e.1))  ∥
                             (∃ z. (('1'+e+tol) = ('1'+'1'+'1'+tol+z+e.1))) )
                        case case_1
                        solve( !Epoch( 'TC', ('1'+'1'+e) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke
                          solve( !KU( sign(<prl, ('1'+'1'+e)>, ~ltk) ) @ #vk.15 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+'1'+e) = ('1'+e+z)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.16 )
                          qed
                        next
                          case TC_process_heartbeat_revoke
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( !Epoch( 'TC', ('1'+'1'+e+z) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke
                          solve( !KU( sign(<prl, ('1'+'1'+e+z)>, ~ltk) ) @ #vk.16 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.9 < #k))  ∥ (∀ z.1. (('1'+'1'+e+z) = ('1'+e+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.17 )
                          qed
                        next
                          case TC_process_heartbeat_revoke
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( (('1'+e+x) = ('1'+'1'+'1'+x+z+e.1))  ∥
                             (∃ z.1. (('1'+e+x) = ('1'+'1'+'1'+x+z+e.1+z.1))) )
                        case case_1
                        solve( !Epoch( 'TC', ('1'+'1'+e+z) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke
                          solve( !KU( sign(<prl, ('1'+'1'+e+z)>, ~ltk) ) @ #vk.16 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.9 < #k))  ∥ (∀ z.1. (('1'+'1'+e+z) = ('1'+e+z.1)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.17 )
                          qed
                        next
                          case TC_process_heartbeat_revoke
                          by contradiction /* from formulas */
                        qed
                      next
                        case case_2
                        solve( !Epoch( 'TC', ('1'+'1'+e+z+z.1) ) ▶₀ #i )
                          case TC_process_heartbeat_no_revoke
                          solve( !KU( sign(<prl, ('1'+'1'+e+z+z.1)>, ~ltk) ) @ #vk.17 )
                            case RA_generate_heartbeat_case_1
                            solve( (¬(#vr.9 < #k))  ∥
                                   (∀ z.2. (('1'+'1'+e+z+z.1) = ('1'+e+z.2)) ⇒ ⊥) )
                              case case_1
                              by contradiction /* from formulas */
                            next
                              case case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case RA_generate_heartbeat_case_2
                            by contradiction /* from formulas */
                          next
                            case c_sign
                            by solve( !KU( ~ltk ) @ #vk.18 )
                          qed
                        next
                          case TC_process_heartbeat_revoke
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case case_2_case_4
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.15 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+x) = ('1'+e+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.7))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+tol+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+tol+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+tol+x) = ('1'+'1'+'1'+e+tol))  ∥
                                     (∃ z. (('1'+'1'+tol+x) = ('1'+'1'+'1'+e+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+'1'+e+tol))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+'1'+e+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_2
                              solve( (('1'+tol+x) = ('1'+'1'+'1'+e+tol))  ∥
                                     (∃ z. (('1'+tol+x) = ('1'+'1'+'1'+e+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_3
                              solve( (('1'+x+z) = ('1'+'1'+'1'+e+z+x.1))  ∥
                                     (∃ z.1. (('1'+x+z) = ('1'+'1'+'1'+e+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_4
                              solve( (('1'+'1'+x+x.1) = ('1'+'1'+'1'+e+z+x.1))  ∥
                                     (∃ z.1. (('1'+'1'+x+x.1) = ('1'+'1'+'1'+e+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.16 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  solve( (('1'+e.1) = e)  ∥ (∃ z. (('1'+e.1) = (e+z))) )
                    case case_1
                    solve( !Epoch( 'TC', ('1'+e) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+e)>, ~ltk) ) @ #vk.12 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#k < #vr.7))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                          case case_1
                          solve( (('1'+e) = ('1'+'1'+'1'+tol+e.1))  ∥
                                 (∃ z. (('1'+e) = ('1'+'1'+'1'+tol+z+e.1))) )
                            case case_1
                            by contradiction /* from formulas */
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.13 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_1
                    by solve( (('1'+'1'+tol) = ('1'+e))  ∥
                              (∃ z. (('1'+'1'+tol) = ('1'+e+z))) )
                  next
                    case case_2_case_2
                    solve( (('1'+e) = ('1'+'1'+'1'+tol+e.1))  ∥
                           (∃ z. (('1'+e) = ('1'+'1'+'1'+tol+z+e.1))) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case case_2_case_3
                    solve( (('1'+e+tol) = ('1'+e+x))  ∥ (∃ z. (('1'+e+tol) = ('1'+e+x+z))) )
                      case case_1
                      solve( (('1'+e+tol) = ('1'+'1'+'1'+tol+e.1))  ∥
                             (∃ z. (('1'+e+tol) = ('1'+'1'+'1'+tol+z+e.1))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case case_2
                      solve( (('1'+e+x) = ('1'+'1'+'1'+x+z+e.1))  ∥
                             (∃ z.1. (('1'+e+x) = ('1'+'1'+'1'+x+z+e.1+z.1))) )
                        case case_1
                        by contradiction /* from formulas */
                      next
                        case case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2_case_4
                    solve( !Epoch( 'TC', ('1'+x) ) ▶₀ #i )
                      case TC_process_heartbeat_no_revoke
                      solve( !KU( sign(<prl, ('1'+x)>, ~ltk) ) @ #vk.15 )
                        case RA_generate_heartbeat_case_1
                        solve( (¬(#vr.9 < #k))  ∥ (∀ z. (('1'+x) = ('1'+e+z)) ⇒ ⊥) )
                          case case_1
                          by contradiction /* from formulas */
                        next
                          case case_2
                          solve( (¬(#k < #vr.7))  ∥ (∀ z. (('1'+'1') = ('1'+z)) ⇒ ⊥) )
                            case case_1
                            solve( (('1'+'1'+tol+x) = ('1'+x+z))  ∥
                                   (∃ z.1. (('1'+'1'+tol+x) = ('1'+x+z+z.1))) )
                              case case_1
                              solve( (('1'+'1'+tol+x) = ('1'+'1'+'1'+e+tol))  ∥
                                     (∃ z. (('1'+'1'+tol+x) = ('1'+'1'+'1'+e+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_1
                              solve( (('1'+'1'+x) = ('1'+'1'+'1'+e+tol))  ∥
                                     (∃ z. (('1'+'1'+x) = ('1'+'1'+'1'+e+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_2
                              solve( (('1'+tol+x) = ('1'+'1'+'1'+e+tol))  ∥
                                     (∃ z. (('1'+tol+x) = ('1'+'1'+'1'+e+tol+z))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_3
                              solve( (('1'+x+z) = ('1'+'1'+'1'+e+z+x.1))  ∥
                                     (∃ z.1. (('1'+x+z) = ('1'+'1'+'1'+e+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            next
                              case case_2_case_4
                              solve( (('1'+'1'+x+x.1) = ('1'+'1'+'1'+e+z+x.1))  ∥
                                     (∃ z.1. (('1'+'1'+x+x.1) = ('1'+'1'+'1'+e+z+x.1+z.1))) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case RA_generate_heartbeat_case_2
                        by contradiction /* from formulas */
                      next
                        case c_sign
                        by solve( !KU( ~ltk ) @ #vk.16 )
                      qed
                    next
                      case TC_process_heartbeat_revoke
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case c_pk
                by solve( !KU( ~ps_key ) @ #vk.9 )
              qed
            next
              case c_sign
              by solve( !KU( ~ltk ) @ #vk.5 )
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end